class Node:
    def __init__(self, data = None, next = None, prev = None):
        self.data= data
        self.next=next
        self.prev=prev

class DoubleLinkedList:
    def __init__(self):
        self.head = None
    
    def insert_at_beginning(self, data):
        node = Node(data,self.head, None)
        self.head=node
        if self.head.next is not None:
            self.head.next.prev = node
        return
    
    def print_forward(self):
        if self.head==None:
            print("Linked list is empty!")
            return
        itr= self.head
        dllStr=""
        while itr:
            dllStr+=str(itr.data) + "-->"
            itr = itr.next
        print("Double Linked list -",dllStr)

    def print_backward(self):
        if self.head==None:
            print("Linked list is empty!")
            return
        itr= self.head
        dllStr=""
        while itr.next:
            itr = itr.next
        while itr: 
            dllStr+=str(itr.data) + "-->"
            itr = itr.prev
        print("Double Linked list -",dllStr)
    
    def insert_at_end(self, data):
        if self.head == None:
            self.insert_at_beginning(data)
            return
        itr= self.head

        while itr.next:
            itr=itr.next
        
        itr.next=Node(data,None,itr)
        return
    
    def insert_values(self, data_list):
        self.head=None
        for item in data_list:
            self.insert_at_end(item)
        return
    
    def get_length(self):
        count = 0
        
        itr=self.head
        while itr:
            count+=1
            itr=itr.next
        return count
    
    def insert_at(self, index, data):
        if index < -1 and index >= self.get_length():
            print("Invalid index given.")
            return
        
        if index == 0:
            self.insert_at_beginning(data)
            return
        
        count =0
        itr = self.head
        while itr:
            if count == index-1:
                itr.next = Node(data,itr.next, itr)
                if itr.next.next is not None:
                    itr.next.next.prev = itr.next
                break
            itr = itr.next
            count +=1
        return  
    
    def remove_at_index(self, index):
        if index < -1 and index >= self.get_length():
            print("Invalid index given.")
            return
        
        if index == 0:
            self.head = self.head.next
            self.head.prev = None
            return
        
        count =0
        itr = self.head
        while count <= index:
            if count == index-1:
                itr.next = itr.next.next
                if itr.next.next is not None:
                    itr.next.next.prev = itr.next
                break
            itr = itr.next
            count +=1
        return 
    
    def insert_after_value(self, data_after, data_to_insert):
    # Search for first occurance of data_after value in linked list
    # Now insert data_to_insert after data_after node
        itr = self.head
        while itr:
            if itr.data == data_after:
                itr.next= Node(data_to_insert,itr.next, itr)
                if itr.next.next is not None:
                    itr.next.next.prev = itr.next
                break
            itr=itr.next
    

    def remove_by_value(self, data):
    # Remove first node that contains data
        if self.head.data == data:
            self.head= self.head.next
            self.head.prev = None
            return
        
        itr= self.head
        while itr.next:
            if itr.next.data != None and itr.next.data == data:
                itr.next= itr.next.next
                if itr.next.next is not None:
                    itr.next.next.prev=itr.next
                break
            itr=itr.next


if __name__ == "__main__":
    ll= DoubleLinkedList()
    ll.insert_values(["banana","mango","grapes","orange"])
    ll.print_forward()
    ll.print_backward()
    ll.insert_at_end("figs")
    ll.print_forward()
    ll.print_backward()
    ll.insert_at(0,"jackfruit")
    ll.print_forward()
    ll.print_backward()
    ll.insert_at(6,"dates")
    ll.print_forward()
    ll.print_backward()
    ll.insert_at(2,"kiwi")
    ll.print_forward()
    ll.print_backward()